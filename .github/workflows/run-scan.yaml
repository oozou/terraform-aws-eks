name: code scan

on:
  workflow_call:
    inputs:
      SCAN_TYPE:
        required: true
        type: string         
      SCAN_INCLUDE:
        required: true
        type: string       
      SCAN_EXCLUDE:
        required: false
        type: string            
         
jobs:
  Code-Scan:
    runs-on: oozou-eks-runner
      
    steps:
    - name: Get the correct latest commit sha
      id: get-commit-sha
      env:
        # https://stackoverflow.com/a/61035010
        MERGE_COMMIT_SHA: ${{ github.sha }}
        PR_LATEST_COMMIT_SHA: ${{ github.event.pull_request.head.sha }}
      run: echo "::set-output name=sha::${PR_LATEST_COMMIT_SHA:-$MERGE_COMMIT_SHA}"

    - uses: actions/checkout@v2

    - name: Add SHORT_SHA env property with commit short sha
      run: echo "SHORT_SHA=`echo ${{ steps.get-commit-sha.outputs.sha }} | cut -c1-8`" >> $GITHUB_ENV
    
    - name: get ruby 
      if: contains(inputs.SCAN_TYPE, 'Ruby')
      uses: ruby/setup-ruby@v1
      with:
        bundler-cache: true
        
    - name: Ruby brakeman scan
      if: contains(inputs.SCAN_TYPE, 'Ruby')
      run: |
            gem install brakeman
            if [ -z ${{inputs.SCAN_EXCLUDE}} ]; then export arg="";  else export arg="--skip-files ${{inputs.SCAN_EXCLUDE}}"; fi
            if [ "${{inputs.SCAN_INCLUDE}}" = "." ]; then export SCAN_INCLUDE="/";  else export SCAN_INCLUDE="${{inputs.SCAN_INCLUDE}}"; fi            
            brakeman -A -q -f sonar -p . --only-files  "${SCAN_INCLUDE}" -o external_report --no-exit-on-warn --no-exit-on-error ${arg}
    
    - name: Ruby rubocop scan
      if: contains(inputs.SCAN_TYPE, 'Ruby')
      continue-on-error: true
      run: |
            gem install rubocop
            rubocop  --format json --out rubocop.json --fail-level fatal || true
            echo "RUBOCOP_REPORT=rubocop.json" >> $GITHUB_ENV
            
                   
    - name: IaC KICS scan
      if: contains(inputs.SCAN_TYPE, 'IaC')
      run: |
        if [ -z ${{inputs.SCAN_EXCLUDE}} ]; then export arg="";  else export arg="--exclude-paths ${{inputs.SCAN_EXCLUDE}}"; fi
        docker run -w /path -v $PWD:/path checkmarx/kics scan -o /path -p "${{inputs.SCAN_INCLUDE}}" --report-formats "json" --ignore-on-exit "all" ${arg} 
        ls -lart
        echo "SCAN_TYPE_DOJO=$(echo 'KICS Scan')" >> $GITHUB_ENV


    - name: Nodejs scan
      if: contains(inputs.SCAN_TYPE, 'JavaScript')
      uses: ajinabraham/njsscan-action@master
      with:
        args: '. --sonarqube  --output njsscan_report.sonar || true'
        
    - name: process njsscan report
      if: contains(inputs.SCAN_TYPE, 'JavaScript')
      run: |
        awk 'BEGIN{ FS=OFS=": " } /\"endColumn\"/{ match($NF, /^[0-9]+/); $NF=($NF-1) substr($NF, RLENGTH+1) }1' njsscan_report.sonar > external_report


    - name: Prepare dojo ENV
      run: |
        cat << EOF > .github/workflows/dojo-env.ini
        [server]
        url = https://defectdojo.devops.team.oozou.com/api/v2
        api_key = ${{ secrets.DOJO_API_KEY }}
        
        [product]
        product_name = ${{ github.event.repository.name }}-${{inputs.SCAN_TYPE}}
        description = ${{ github.event.repository.name }}-${{inputs.SCAN_TYPE}}
        product_type = 1
        
        [engagement]
        source_code_management_uri = ${{ github.server_url }}/${{ github.repository }}/blob/${{ steps.get-commit-sha.outputs.sha }}
        engagement_name = terraform-aws-eks-${{ steps.get-commit-sha.outputs.sha }}
        commit_hash = ${{ steps.get-commit-sha.outputs.sha }}
        branch = ${{ github.head_ref || github.ref_name }}
        
        [scan]
        scan_type = ${{ env.SCAN_TYPE_DOJO }}
        file_path = results.json
        EOF

    - name: Upload Result to Dojo
      run: |
        python --version
        python .github/workflows/upload-to-dojo.py